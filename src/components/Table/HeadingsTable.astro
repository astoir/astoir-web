---
import type { MarkdownHeading } from "astro";
import { FaList } from "react-icons/fa";

interface Props {
  headings: MarkdownHeading[];
}

const { headings }: Props = Astro.props;

// headings 배열의 최소 depth를 기준으로 계층적 넘버링 계산 함수
function computeNumbering(headings: MarkdownHeading[]) {
  if (!headings.length) return [];
  const minDepth = Math.min(...headings.map(h => h.depth));
  const counters: number[] = [];
  return headings.map(heading => {
    // 현재 heading의 normalized level (최상위는 0)
    const level = heading.depth - minDepth;
    if (counters.length === level) {
      // 해당 레벨의 첫 번째 항목이면 카운터 추가
      counters.push(1);
    } else {
      // 같은 레벨이면 카운터 증가하고, 더 깊은 레벨은 리셋
      counters[level] = (counters[level] || 0) + 1;
      counters.length = level + 1;
    }
    return { ...heading, numbering: counters.join(".") };
  });
}

const computedHeadings = computeNumbering(headings);
const minDepth = headings.length ? Math.min(...headings.map(h => h.depth)) : 1;
---

<nav class="table-of-contents not-prose">
  <table class="w-full overflow-hidden rounded-lg border border-skin-line">
    <thead class="bg-skin-accent">
      <tr>
        <th
          class="flex items-center gap-2 px-4 py-3 text-left text-lg font-bold text-white-accent"
        >
          <FaList className="inline-block" />
          <span>목차</span>
        </th>
      </tr>
    </thead>
    <tbody class="divide-y divide-skin-line">
      {
        computedHeadings.map(item => (
          <tr class="transition-colors hover:bg-skin-accent/10">
            <td style={`padding-left: ${(item.depth - minDepth) * 1.5}rem;`}>
              <a href={`#${item.slug}`} class="block px-4 py-2 no-underline">
                <span class="mr-2 text-skin-accent">{item.numbering}</span>
                <span class="text-black-accent">{item.text}</span>
              </a>
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>
</nav>
