---
import heroMilkyway from "~assets/images/hero-milkyway.jpg";
import FloatingIcons from "~components/Hero/FloatingIcons";
import LoadingSpinner from "~components/LoadingSpinner/LoadingSpinner";
---
<style>
  @keyframes fadeIn {
    from { opacity: 0; transform: scale(0.5); }
    to { opacity: 1; transform: scale(1); }
  }
  .fade-in {
    animation: fadeIn 1s forwards;
  }
</style>
<section
  id="hero-section"
  class="relative flex h-[66vh] w-full flex-col items-center justify-center overflow-hidden bg-skin-fill sm:h-[66vh]"
>
  <picture>
    <img
      id="hero-img"
      src={heroMilkyway.src}
      alt="Hero 배경 이미지"
      class="absolute inset-0 z-0 h-full w-full object-cover"
      style="display: none;"
      onload="handleImageLoad()"
    />
  </picture>

  <div id="spinner" class="absolute inset-0 flex items-center justify-center bg-black">
    <LoadingSpinner className="h-full w-full" client:load />
  </div>

  <div id="hero-overlay" class="hidden">
    <!-- 어두운 오버레이 -->
    <div class="absolute inset-0 z-10 bg-black opacity-60"></div>

    <!-- FloatingIcons: 타이핑 애니메이션 완료 후 실행 -->
    <div id="floating-icons-container" class="pointer-events-none absolute inset-0 z-0 overflow-hidden opacity-80 hidden">
      <FloatingIcons client:only="react" />
    </div>

    <!-- 메인 콘텐츠 -->
    <div class="relative z-20 mx-auto flex flex-col items-center space-y-6 px-4 text-center">
      <!-- 코드 에디터 시뮬레이션 -->
      <div
        id="code-editor"
        class="relative font-code text-white-accent text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl 2xl:text-7xl p-4 rounded-lg block w-full whitespace-pre-wrap break-all text-center"
      >
        <div class="w-full flex justify-center items-center">
            <span id="code-class"></span>
            <span id="code-dot"></span>
            <span id="code-method"></span>
            <span id="code-cursor" class="animate-blink">|</span>
        </div>
        <p id="hero-text" class="font-sans font-light text-xs sm:text-sm md:text-base lg:text-lg xl:text-xl 2xl:text-2xl text-gray-200">
          안녕하세요! <span class="font-bold">백엔드 개발자 Astor, 김도훈</span>입니다.
문제의 복잡함을 꿰뚫어보고,<span class="font-bold">간결하고 명확한 구조</span>로
현실에 녹아들 수 있는 솔루션을 만듭니다.
        </p>
        <!-- 자동완성 제안 박스 -->
        <div
          id="autocomplete"
          class="absolute bg-gray-800 text-white-base text-xs p-1 rounded z-50 hidden w-36 text-left"
        ></div>
      </div>
    </div>
  </div>
</section>

<script is:inline>
  // 이미지 로드 완료 시 처리
  window.handleImageLoad = () => {
    const heroImg = document.getElementById("hero-img");
    const spinner = document.getElementById("spinner");
    const heroOverlay = document.getElementById("hero-overlay");
    if (heroImg) { heroImg.style.display = "block"; }
    if (spinner) { spinner.style.display = "none"; }
    if (heroOverlay) { heroOverlay.classList.remove("hidden"); }
  };

  // 타이핑 애니메이션 종료 후 붙여넣기 효과를 실행하는 함수
  function executeAstorverse() {
    const heroText = document.getElementById("hero-text");
    const codeCursor = document.getElementById("code-cursor");
    // 2. <p> 태그의 내용을 붙여넣는 효과 (순간적으로 나타나도록)
    if (heroText) {
      heroText.classList.remove("hidden");
    }
    // 3. 커서 제거
    if (codeCursor) {
      codeCursor.style.display = "none";
    }
    // 4. FloatingIcons 효과 실행
    const floatingIconsContainer = document.getElementById("floating-icons-container");
    if (floatingIconsContainer) {
      floatingIconsContainer.classList.remove("hidden");
      floatingIconsContainer.classList.add("fade-in");
    }
  }

  // 코드 에디터 자동완성 시뮬레이션
  document.addEventListener("DOMContentLoaded", () => {
    const codeEditor = document.getElementById("code-editor");
    const codeClass = document.getElementById("code-class");
    const codeDot = document.getElementById("code-dot");
    const codeMethod = document.getElementById("code-method");
    const codeCursor = document.getElementById("code-cursor");
    const autocomplete = document.getElementById("autocomplete");

    const classText = "astorverse";
    let index = 0;

    // 자동완성 제안 업데이트 함수
    function updateAutocomplete(suggestions, index) {
      autocomplete.innerHTML = suggestions
        .map(
          (item, index) =>
          `<div class="py-1 px-2 cursor-pointer hover:bg-gray-600 ${index==0?'bg-gray-600':''}">${item}</div>`
        )
        .join("");
      if(index === 2) {
        console.log("index", index);
        autocomplete.classList.remove("hidden");
      }
      // 자동완성 박스가 커서를 따라가도록 위치 설정
      if (codeEditor && codeCursor) {
        const editorRect = codeEditor.getBoundingClientRect();
        const cursorRect = codeCursor.getBoundingClientRect();
        let offsetX = cursorRect.left - editorRect.left;
        let offsetY = cursorRect.bottom - editorRect.top;

        // 자동완성 박스의 크기
        const acWidth = autocomplete.offsetWidth;
        const acHeight = autocomplete.offsetHeight;

        // 뷰포트 크기
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;

        if (cursorRect.left + acWidth > viewportWidth) {
          offsetX = viewportWidth - acWidth - editorRect.left;
        }
        if (cursorRect.bottom + acHeight > viewportHeight) {
          offsetY = viewportHeight - acHeight - editorRect.top; 
        }
        autocomplete.style.left = offsetX + "px";
        autocomplete.style.top = offsetY + "px";

      }
    }

    // 초기 클래스 자동완성 제안
    function showClassSuggestions(index, sliceText) {
      const classSuggestions = [
        "aggregateRoot",
        "aspect",
        "assigner",
        "astor",
        "astorAdapter",     // 어댑터 패턴
        "astorCommand",     // 명령(Command)
        "astorEntity",      // 도메인 엔티티
        "astorEvent",       // 이벤트 객체
        "astorHandler",     // 이벤트 핸들러
        "astorQuery",       // 쿼리 처리 객체
        "astorService",     // 서비스 객체
        "astorverse"        // 네임스페이스 느낌
      ];
      const sliceSuggestions = classSuggestions.filter(item => item.startsWith(sliceText));
      updateAutocomplete(sliceSuggestions, index);
    }
    // 메서드 자동완성 제안 ('.' 입력 후)
    function showMethodSuggestions(index) {
      const methodSuggestions = [
        "execute()",        // 실행
        "initialize()",     // 초기화
        "persist()",        // 저장
        "query()",         // 데이터 조회
        "registerEvent()", // 이벤트 등록
        "resolve()",       // 의존성 해결
        "rollback()",      // 롤백
        "transform()",     // 데이터 변환
        "validate()"       // 검증
      ];

      updateAutocomplete(methodSuggestions, index);
    }

    // "astorverse"를 한 글자씩 타이핑하는 시뮬레이션
    function typeClass() {
      if (index < classText.length) {
        codeClass.textContent += classText[index];
        const sliceText = classText.slice(0, index);
        index++;
        showClassSuggestions(index, sliceText); // 입력할 때마다 클래스 제안 업데이트
        setTimeout(typeClass, 100);
      } else {
        // 클래스 이름 타이핑 완료 후 잠깐 대기
        setTimeout(() => {
          // "." 입력 시뮬레이션
          codeDot.textContent = ".";
          // 신텍스 하이라이팅: 클래스 이름 강조 (Tailwind 임의 색상 사용)
          codeClass.classList.add("text-[#a3e635]");
          // 자동완성 제안 업데이트: 메서드 제안으로 전환
          showMethodSuggestions(index);
          // 잠시 후 메서드 자동완성 선택 (예시: execute())
          setTimeout(() => {
            codeMethod.textContent = "execute()";
            autocomplete.classList.add("hidden");
            // 붙여넣기 효과 실행 (커서 엔터 효과 포함)
            executeAstorverse();
          }, 1000);
        }, 500);
      }
    }
    typeClass();
  });
</script>
