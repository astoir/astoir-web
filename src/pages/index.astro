---
import Layout from "~layouts/BaseLayout.astro";
import ProjectCard from "~components/Card/ProjectCard";
import BlogPostCard from "~components/Card/BlogPostCard";
import { ShootingStarHeader } from "~components/Header/ShootingStarHeader";
import TagCard from "~components/Card/TagCard";
import HorizontalSeriesCard from "~components/Card/HorizontalSeriesCard";
import { repositoryContainer } from "~modules/repository.module";
import {
  PROJECT_REPOSITORY,
  type ProjectRepository,
} from "~modules/repositories/projects/ProjectRepository";
import {
  POST_REPOSITORY,
  type PostRepository,
} from "~modules/repositories/posts/PostRepository";
import type { PostEntry, Tag, Series } from "~types/post.type";
import type { ProjectEntry } from "~types/project.type";
import HomeHero from "~components/Hero/HomeHero";
import type { Paginated } from "~types/page.type";
import HomeSeriesCarousel from "~components/Slider/HomeSeriesSlider";
import HomeProjectSlider from "~components/Slider/HomeProjectSlider";
const projectRepository =
  repositoryContainer.get<ProjectRepository>(PROJECT_REPOSITORY);
const postRepository = repositoryContainer.get<PostRepository>(POST_REPOSITORY);

const projects: Paginated<ProjectEntry> = await projectRepository.getProjects({
  paging: { page: 0, limit: 5 },
  sort: { field: "endedAt", order: "desc" },
  filter: {
    projectTypes: ["Company-project", "Side-project"],
  },
});

// 블로그 데이터 가져오기
const pinnedPosts: PostEntry[] = (
  await postRepository.getPosts({
    filter: { pinned: true, draft: false },
  })
).items;
const tags: Tag[] = await postRepository.getAllTags();
const seriesList: Series[] = await postRepository.getAllSeries();

---

<Layout>
  <Fragment slot="hero">
    <HomeHero client:only="react" />
  </Fragment>
  <div class="mx-auto w-full">
    {/* 인기 태그 섹션 */}
    <section class="mb-16">
      <ShootingStarHeader
        title="인기 태그"
        description="자주 다루는 주제들이에요"
        moreLink="/blog"
        client:load
      />
      <div
        class="grid grid-cols-2 gap-4 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-6"
      >
        {
          tags
            .sort((a, b) => b.count - a.count)
            .slice(0, 12)
            .map((tag, index) => (
              <TagCard
                {...tag}
                className={`${index > 7 ? "hidden lg:block" : ""}`}
                client:load
              />
            ))
        }
      </div>
    </section>
    <section class="mb-16">
      <div class="flex flex-col space-y-4">
        <ShootingStarHeader
          title="시리즈"
          description="연재 중인 시리즈들이에요"
          moreLink="/blog/series"
          client:load
        />
        <HomeSeriesCarousel seriesList={seriesList} client:only="react" />
      </div>
    </section>
    {/* 시리즈와 주목할만한 글 영역 - PC에서는 2열, 모바일은 1열 */}
    <section class="mb-16">
      {/* 주목할만한 글 영역 - 그리드 카드 형태 */}
        <ShootingStarHeader
          title="주목할만한 글"
          description="놓치면 아쉬운 글들이에요"
          moreLink="/blog"
          client:load
        />
        <div class="h-full">
          <div class="grid h-full grid-cols-1 gap-4 sm:grid-cols-2">
            {
              pinnedPosts
                .slice(0, 4)
                .map(post => <BlogPostCard {...post} client:load />)
            }
          </div>
      </div>
    </section>

    {/* 프로젝트 섹션 */}
    <section class="mb-16">
      <ShootingStarHeader
        title="프로젝트 모음"
        description="진행했던 프로젝트들이에요"
        moreLink="/projects"
        client:load
      />
      <HomeProjectSlider projects={projects.items} client:only="react" />
    </section>
  </div>
</Layout>
